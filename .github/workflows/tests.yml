name: Database Migrations

on:
  push:
    branches: ['main', 'develop']
    paths:
      - 'app/models/**'
      - 'alembic/**'
  pull_request:
    branches: ['main', 'develop']
    paths:
      - 'app/models/**'
      - 'alembic/**'
  # Permite ejecutar manualmente desde la interfaz de GitHub
  workflow_dispatch:

jobs:
  verify-migrations:
    runs-on: ubuntu-latest

    services:
      # Servicio PostgreSQL para pruebas
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction

      # PRUEBAS SQLITE
      - name: Prepare SQLite Database
        run: |
          mkdir -p /tmp/test_data
          echo "SQLITE_URL=sqlite:////tmp/test_data/test_sqlite.db" >> .env

      - name: Test SQLite Migrations - Forward
        env:
          SQLITE_URL: sqlite:////tmp/test_data/test_sqlite.db
        run: |
          poetry run alembic upgrade head
          echo "✅ Forward migrations successful on SQLite"

      - name: Test SQLite Migrations - Rollback
        env:
          SQLITE_URL: sqlite:////tmp/test_data/test_sqlite.db
        run: |
          poetry run alembic downgrade base
          echo "✅ Rollback migrations successful on SQLite"

      # PRUEBAS POSTGRESQL
      - name: Test PostgreSQL Migrations - Forward
        env:
          SQLALCHEMY_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          poetry run alembic upgrade head
          echo "✅ Forward migrations successful on PostgreSQL"

      - name: Test PostgreSQL Migrations - Rollback
        env:
          SQLALCHEMY_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          poetry run alembic downgrade base
          echo "✅ Rollback migrations successful on PostgreSQL"

      # VERIFICACIÓN DE MODELOS vs MIGRACIONES
      - name: Verify Models Match Migrations
        env:
          SQLALCHEMY_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          # Subir a la última versión
          poetry run alembic upgrade head

          # Generar una revisión de prueba para verificar si hay cambios no migrados
          poetry run alembic revision --autogenerate -m "verification" --check-only

          # Si el comando anterior falló, significa que hay cambios no migrados
          if [ $? -ne 0 ]; then
            echo "❌ Error: Los modelos SQLAlchemy están fuera de sincronización con las migraciones."
            echo "Ejecuta 'alembic revision --autogenerate' localmente para generar una migración."
            exit 1
          else
            echo "✅ Los modelos SQLAlchemy están sincronizados con las migraciones."
          fi

      # GENERACIÓN AUTOMÁTICA DE MIGRACIONES (solo en develop)
      - name: Auto-generate Migration (develop branch only)
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        env:
          SQLALCHEMY_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          # Verificar si hay cambios en los modelos respecto a las migraciones
          MIGRATION_RESULT=$(poetry run alembic revision --autogenerate -m "auto_migration_$(date +%Y%m%d%H%M%S)" --check-only 2>&1)

          # Si hay cambios, generar la migración
          if [ $? -ne 0 ]; then
            echo "Detectados cambios en los modelos. Generando migración automática..."
            poetry run alembic upgrade head
            poetry run alembic revision --autogenerate -m "auto_migration_$(date +%Y%m%d%H%M%S)"

            # Configurar Git para commit automático
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"

            # Añadir y commit de los nuevos archivos de migración
            git add alembic/versions/*.py
            git commit -m "Auto-generated migration from CI"
            git push

            echo "✅ Migración automática generada y subida"
          else
            echo "✅ No se requiere migración - modelos sincronizados"
          fi
