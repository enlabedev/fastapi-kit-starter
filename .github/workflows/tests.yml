name: Python Tests

on:
  push:
    branches: ['main', 'develop']
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.vscode/**'
  pull_request:
    branches: ['main', 'develop']
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.vscode/**'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12']

    services:
      # Servicio de base de datos PostgreSQL (para pruebas con base de datos real)
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        # Opciones de salud para esperar a que PostgreSQL estÃ© listo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Run Linting
        run: |
          poetry run pysen run lint
          poetry run pysen run format

      - name: Run Security Check
        run: |
          poetry run bandit -r app -x tests

      - name: Create SQLite Database for Tests
        run: |
          mkdir -p /tmp/test_data
          poetry run python -c "import sqlite3; sqlite3.connect('/tmp/test_data/sqlite.db')"
          echo "SQLITE_URL=sqlite:////tmp/test_data/sqlite.db" >> .env

      - name: Run Tests with Coverage
        env:
          SQLITE_URL: sqlite:////tmp/test_data/sqlite.db
          API_PREFIX: /api/v1
          PROJECT_NAME: 'FASTAPI KIT STARTER'
          BACKEND_CORS_ORIGINS: '[*]'
          LOGGING_CONFIG_FILE: 'logging.ini'
          PROJECT_VERSION: '0.0.1'
        run: |
          poetry run pytest --cov=app --cov-report=xml --cov-report=term tests/

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Run Migrations to verify they work
        env:
          SQLITE_URL: sqlite:////tmp/test_data/sqlite.db
        run: |
          poetry run alembic upgrade head

      - name: Archive Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            .coverage
          retention-days: 7
