name: CI

on:
  push:
    branches: ['main', 'develop']
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.vscode/**'
  pull_request:
    branches: ['main', 'develop']
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.vscode/**'
  workflow_dispatch:

jobs:
  quality-and-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12']
    env:
      SQLITE_DB_PATH: /tmp/test_data/sqlite.db
      SQLITE_URL: sqlite:///sqlite.db
      API_PREFIX: /api/v1
      PROJECT_NAME: 'FASTAPI KIT STARTER'
      BACKEND_CORS_ORIGINS: '[*]'
      LOGGING_CONFIG_FILE: 'logging.ini'
      PROJECT_VERSION: '0.0.1'
      POETRY_VIRTUALENVS_IN_PROJECT: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root # Instala dependencias, --no-root si tu proyecto no es instalable en sí mismo

      - name: Code Quality Checks
        id: code-quality
        run: |
          echo "::group::Running Black"
          poetry run black --check app tests || echo "::warning::Black formatting issues found"
          echo "::endgroup::"

          echo "::group::Running isort"
          poetry run isort --check-only --profile black app tests || echo "::warning::Import sorting issues found"
          echo "::endgroup::"

          echo "::group::Running flake8"
          poetry run flake8 app tests || echo "::warning::Linting issues found"
          echo "::endgroup::"

          echo "::group::Running mypy"
          poetry run mypy app tests || echo "::warning::Type checking issues found"
          echo "::endgroup::"

          echo "::group::Running bandit"
          poetry run bandit -r app -x tests || echo "::warning::Security issues found"
          echo "::endgroup::"

      - name: Create SQLite Database Directory and File
        run: |
          mkdir -p /tmp/test_data
          touch ${{ env.SQLITE_DB_PATH }} # Crea el archivo vacío
          echo "SQLite DB file created at ${{ env.SQLITE_DB_PATH }}"
          ls -la /tmp/test_data/ # Verifica que se creó

      - name: Verify Database Migrations
        id: migrations
        run: |
          echo "Running Alembic migrations..."
          # Asegúrate de que tu alembic/env.py lee la variable de entorno SQLITE_URL
          poetry run alembic upgrade head
          echo "Alembic migrations applied."

      - name: Run Tests with Coverage
        id: tests
        run: |
          echo "Running pytest..."
          # Pytest debería usar la misma SQLITE_URL si tu app/tests están configurados para leerla
          poetry run pytest --cov=app --cov-report=xml --cov-report=term tests/
          echo "Pytest finished."

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            .coverage # Si necesitas el archivo binario de coverage
          retention-days: 3
